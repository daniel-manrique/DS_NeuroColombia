---
title-block-banner: true
title: "Data handling for NeuroColombia research project"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    degrees:
      - PhD
    affiliation: 
      - name: Digital Research Alliance of Canada 
        department: Research Data Management
note: "GitHub: https://daniel-manrique.github.io/"
keywords: 
  - Epidemiology
  - Neuropsychology
  - Mental health
  - Colombia 
   
license: "CC BY"

format:
   typst:
    toc: true
    toc-depth: 2
    columns: 1
   html:
    code-fold: false
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false
---

# Install and load packages

We install the required packages to handle data

```{r}
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("gt", quietly = TRUE)) install.packages("gt")
if (!requireNamespace("purrr", quietly = TRUE)) install.packages("purrr")
if (!requireNamespace("readxl", quietly = TRUE)) install.packages("readxl")
if (!requireNamespace("stringr", quietly = TRUE)) install.packages("stringr")
if (!requireNamespace("stringi", quietly = TRUE)) install.packages("stringi")
if (!requireNamespace("tidyr", quietly = TRUE)) install.packages("tidyr")

library(dplyr)
library(gt)
library(purrr)
library(readxl)
library(stringr)
library(stringi)
library(tidyr)


```

# Handling of neuropsychological case data

In this section, we process original neuropsychological data from the Colombian Ministry of Health to generate clean, clear data tables.

## Load data

We load the `Data_Raw/Ministry_OriginalData.xls' which contains the original data for the number of neurological diagnoses in the country. We use the `map_dfr` function to merge all the tabs of the Excel file.

```{r}
# Define the file path 
file_path <- "Data_Raw/Ministry_OriginalData.xlsx"

# Get all sheet names
sheet_names <- excel_sheets(file_path)

# Read all sheets and combine them into a single dataframe
Ministry_data_Raw <- map_dfr(sheet_names, ~ read_excel(file_path, sheet = .x), .id = "SheetName")
```

We render the resulting table using the `gt` function.

```{r}
gt::gt(Ministry_data_Raw[1:10,])
```

## Handling of dataset columns

After visually inspecting the dataset, we exclude the first row containing the original tab/sheet number, change the names of the variable columns, and set English as the working language for the dataset:

```{r}
# Eliminate the first column
Ministry_data_Raw <- Ministry_data_Raw %>% select(-SheetName)

# Change column names in order
colnames(Ministry_data_Raw) <- c("Year", "Department",  "City", "Diagnostic", "Age", "Sex", "Cases")

```

Then we format the labels of the dataset as they contain unwanted characters that obscure the data:

```{r}

Ministry_data_clean <- Ministry_data_Raw %>%
  # Remove numbers and hyphen from 'Department' column
  mutate(Department = str_remove(Department, "^\\d+\\s-\\s*"),
         Department = str_to_title(Department)) %>%  # Convert to Title Case
  
  # Remove numbers and hyphen from 'City' column
  mutate(City = str_remove(City, "^\\d+\\s-\\s*"),
         City = str_to_title(City)) %>%  # Convert to Title Case
  
  # Extract only the diagnostic code starting with "F"
  mutate(Diagnostic = str_extract(Diagnostic, "^F\\d+")) %>%
  
  # Extract only numeric values from 'Age' column
  mutate(Age = str_extract(Age, "\\d+")) %>%
  
  # Replace "MASCULINO" with "Men" and "FEMENINO" with "Women"
  mutate(Sex = recode(Sex, "MASCULINO" = "Men", "FEMENINO" = "Women"))
```

Now, we verify the resulting table:

```{r}
gt::gt(Ministry_data_clean[1:10,])
```

Our next step is to eliminate all the Spanish accents to make all data tablñes compatible and avoid misshandling of information.For this pupose we use the `stringi` package to support unicode transformations.

```{r}
Ministry_data_clean <- Ministry_data_clean %>%
  mutate(
    Department = stri_trans_general(Department, "Latin-ASCII"),
    City = stri_trans_general(City, "Latin-ASCII")
  )
```



Further processing of the data revealed that some article words in `City` and `Department`  names are capitalised, for example Santa Rosa **De*** Osos or Valle **Del** Cauca. To standardise these characters with other datasets, we will decapitalise this article.Also, we modify the Label for Bogotá to make it compatible with other tables.

```{r}
Ministry_data_clean <- Ministry_data_clean %>%
  mutate(City = str_replace_all(City, "\\bDe\\b", "de"),
         City = str_replace_all(City, "\\bDel\\b", "del"),
         City = str_replace_all(City, "\\bLa\\b", "la"),
         Department = str_replace_all(Department, "\\bDe\\b", "de"),
         Department = str_replace_all(Department, "\\bDel\\b", "del"),
         Department = str_replace(Department, "Bogota, D\\.c", "Bogota, D.C"),
         City = str_replace(City, "Bogota, D\\.c", "Bogota, D.C"))
```

## Subset the dataset

We subset the dataset based on the following criteria:

- Valid `sex` entry: Cases with "NR - NO REPORTADO" (not reported are excluded).
- For `year`, we select cases from 0 to 11 years old
- We select valid entries for `Department` and `City`. "No Definido" (Not defined) cases are excluded. 

We use the `filter` function to subset the dataset:

```{r}
# Subset data for Sex = "Men" or "Women" and Age between 0 and 11
Ministery_DiagnosticData <- Ministry_data_clean %>%
  filter(Sex %in% c("Men", "Women"),
         as.numeric(Age) >= 0 & as.numeric(Age) <= 11,
         !Department %in% c("No Definido", "-1 - No Definido"),
         !City %in% c("No Definido", "-1 - No Definido"))

# Make sure year and age are numerical
Ministery_DiagnosticData$Year <- as.numeric(Ministery_DiagnosticData$Year)
Ministery_DiagnosticData$Age <- as.numeric(Ministery_DiagnosticData$Age)
```

The resulting table contains `385,991` diagnostic cases. We display the structure of the dataset to check its attributes:

```{r}
# Display the subsetted dataset
str(Ministery_DiagnosticData)
```
The table contains the following variables: 

**Year:** Year in which the neurological diagnosis was made. Date range from 2016 to 2022.

**Department:** Geographical Colombian department where the diagnosis was made (Colombia has 32 departments) 

**City:** City where the diagnosis was made. 

**Diagnosis:** Neuropsychological diagnosis according to [CIE-11](https://icd.who.int/en/).

**Age:** Age of the diagnosed person.

**Sex:** Biological sex/gender of the diagnosed person (men or women).

**Cases:** Number of diagnosed cases.

Finally, we write a `.cvs` file (with UTF-8 encoding) in the "Data_Processed" folder to save the clean table.

```{r}
write.csv(Ministery_DiagnosticData, "Data_Processed/Ministery_DiagnosticData.csv", row.names = FALSE, fileEncoding = "UTF-8")

```

::: {.callout-warning}

Please note that as this file contains special Spanish characters, if opened in Excel, the user needs to make sure of the encoding:

Open Excel → Go to Data → Get External Data → From Text.
Choose the .csv file and set UTF-8 encoding in the import wizard.
:::

# Handling of DANE data

In this section, we retrive data from DANE (National Administrative Department of Statistics) in Colombia, which contains information about the population

## Load data

We load two data tables associated with population data in Colombia: (`DANE_PopulationData_2005-2019.xlsx` and `DANE_PopulationData_2005-2019.xlsx`). 

```{r}
Dane_Data_2019 <- read_excel("Data_Raw/DANE_PopulationData_2005-2019.xlsx") 
Dane_Data_2035 <- read_excel("Data_Raw/DANE_PopulationData_2020-2035.xlsx")
```

Now we merge the Dane_Data_2019 and Dane_Data_2035 into a single dataset (`Dane_Data_Total`), then we subset the rows of interest with the following criteria:

- Men and women between 0 and 11 years old
- Timeperiod from 2016 to 2022
- Valid city labels: "No Definido" (Not defined) rows are excluded. 

```{r}
# We merge the datasets
Dane_Data_Total <- rbind(Dane_Data_2019, Dane_Data_2035)

# We select the rows containing total counts for ÁREA GEOGRÁFICA (Including urban and rural areas)
Dane_Data_Total <- subset(Dane_Data_Total, `ÁREA GEOGRÁFICA` == "Total")

# We subset ID variables and columns containing counts for population between 0 and 11 years old and from 2016 to 2022
Dane_Data_Total <- Dane_Data_Total %>%
  filter(AÑO >= 2016 & AÑO <= 2022,
         DPNOM != "No Definido",
         DPMP != "No Definido") %>%
  select(DPNOM, DPMP, AÑO, matches("^(Hombres|Mujeres)_([0-9]|1[0-1])$"))

```

Now, we inspect the resulting data for `Dane_Data_Total`:

```{r}
gt::gt(Dane_Data_Total[1:10,])
```
The resulting table provides information on the number of men (Hombres) and women (Mujeres) from 0 to 11 years of age by year, department and city in Colombia.

As done previusly, we aliminate Spanish accents to avoid misstreatment of information. In addition, we transform the capitalization of article in Department and City names to facilitate the interoperability between data tables.

```{r}
Dane_Data_Total <- Dane_Data_Total %>%
  mutate(
    DPNOM = stri_trans_general(DPNOM, "Latin-ASCII"),
    DPMP = stri_trans_general(DPMP, "Latin-ASCII")
  )

Dane_Data_Total <- Dane_Data_Total %>%
  mutate(DPMP = str_replace_all(DPMP, "\\bDe\\b", "de"),
         DPMP = str_replace_all(DPMP, "\\bDel\\b", "del"),
         DPMP = str_replace_all(DPMP, "\\bLa\\b", "la"),
         DPNOM = str_replace_all(DPNOM, "\\bDe\\b", "de"),
         DPNOM = str_replace_all(DPNOM, "\\bDel\\b", "del"),
         DPNOM = str_replace(DPNOM, "Bogota, D\\.c", "Bogota, D.C"),
         DPMP = str_replace(DPMP, "Bogota, D\\.c", "Bogota, D.C"))

```


## Transforming wide to long format

In this section, we transform the `Dane_Data_Total` from wide to long format and setup the variable `Edad` as numeric. Also, we create a new column called "Poblacion", which will be the reference population for the number of diagnostics.

```{r}
# Reshape Dane_Data_Total to long format:
Dane_Data_Total_long <- Dane_Data_Total %>%
  pivot_longer(
    cols = c(starts_with("Hombres_"), starts_with("Mujeres_")),
    names_to = c("Sexo", "Edad"),
    names_sep = "_",
    values_to = "Poblacion"
  )

Dane_Data_Total_long$Edad <- as.numeric(Dane_Data_Total_long$Edad)
```

We verify the data strcuture

```{r}
str(Dane_Data_Total_long)
```
We see that `DPNOM` (department), `DPMP` (city) and `Sexo` are character variables, while `AÑO` (year), `Edad` (age) and `Poblacion` (population) are numeric. The dataset contains a total of `834.768` observations.

Next, we make sure column names and labels are compatible with the `Ministery_DiagnosticData` dataset.

```{r}
# Change column names in order
colnames(Dane_Data_Total_long) <- c("Department", "City",  "Year", "Sex", "Age", "Population")

# Replace "MASCULINO" with "Men" and "FEMENINO" with "Women"
Dane_Data_Total_long <- Dane_Data_Total_long %>%
  mutate(Sex = recode(Sex, "Hombres" = "Men", "Mujeres" = "Women"))
```

# Relate diagnostic and population data
 
## Merging datasets

In this section we relate the diagnostic and DANE datasets. We want to pair the population by age from the `Dane_Data_Total_long` dataset with the `Ministery_Data` dataset, taking into account the municipality (`Municipio`), year (`Año`), sex (`Sexo`) and age (`Edad`).

```{r}
# Merge the reshaped reference population with Ministery_Data:
Ministery_Data_with_pop <- Ministery_DiagnosticData %>%
  left_join(Dane_Data_Total_long,
            by = c("City",  
                   "Department",
                   "Year",           
                   "Sex",                 
                   "Age"                   
            ))
```

We verify the result

```{r}
gt::gt(Ministery_Data_with_pop[1:10,])
```
Next, we check if we have some NAs after the joint to look for possible errors.

```{r}
Ministery_Data_with_pop %>% filter(if_any(everything(), is.na)) %>%
  count(Department, City, sort = TRUE)
```

The above shows some cities and departments that contain NAs in the population column. This is the result of different naming convention for some cities and departments in `Ministery_DiagnosticData` and `Dane_Data_Total_long`. Therefore, we will manually rename the cities and/or departments in the `Dane_Data_Total_long` before doing the merge. Please note that we will only rename cities/departments that have data in the `Ministery_DiagnosticData` dataset.

```{r}
# Clean and correct city and department names in one of the datasets
Dane_Data_Total_long <- Dane_Data_Total_long %>%
  mutate(
    City = case_when(
      City == "Cartagena de Indias" ~ "Cartagena",
      City == "San Jose de Cucuta" ~ "Cucuta",
      City == "Piendamo - Tunia" ~ "Piendamo",
      City == "Archipielago de San Andres" ~ "Archipielago de San Andres, Providencia Y Santa Catalina",
      City == "Cuaspud Carlosama" ~ "Cuaspud",
      City == "Donmatias" ~ "Don Matias",
      City == "Purisima de La Concepcion" ~ "Purisima",
      City == "Sotara Paispamba" ~ "Sotara",
      City == "Manaure Balcon del Cesar" ~ "Manaure",
      City == "Puerto Leguizamo" ~ "Leguizamo",
      City == "Cacahual (ANM)" ~ "Cacahual",
      City == "Guican de La Sierra" ~ "Guican",
      City == "Lopez de Micay" ~ "Lopez",
      City == "El Encanto (ANM)" ~ "El Encanto",
      City == "La Chorrera (ANM)" ~ "La Chorrera",
      City == "Tarapaca (ANM)" ~ "Tarapaca",
      City == "Barrancominas (ANM)" ~ "Barrancominas",
      City == "La Pedrera (ANM)" ~ "La Pedrera",
      City == "Cartagena de Indias" ~ "Cartagena",
      City == "Cartagena de Indias" ~ "Cartagena",
      City == "Puerto Santander (ANM)" ~ "Puerto Santander",
      City == "Puerto Colombia (ANM)" ~ "Puerto Colombia",
      TRUE ~ City ),
   
    
    Department = case_when(
      Department == "Archipielago de San Andres" ~ "Archipielago de San Andres, Providencia Y Santa Catalina",
      TRUE ~ Department )
  )
  
```


We perform again the joint

```{r}
# Merge the reshaped reference population with Ministery_Data:
Ministery_Data_with_pop <- Ministery_DiagnosticData %>%
  left_join(Dane_Data_Total_long,
            by = c("City",  
                   "Department",
                   "Year",           
                   "Sex",                 
                   "Age"                   
            ))
```


And verify the NAs

```{r}
Ministery_Data_with_pop %>% filter(if_any(everything(), is.na)) %>%
  count(Department, City, sort = TRUE)
```
We see that this cities do not have corresponding diagnostic data or that the data connot be paired. Therefore, we exclude them from further processing and analysis:

```{r}
library(tidyr)

Ministery_Data_with_pop <- Ministery_Data_with_pop %>%
  drop_na()
```


## Handling city/capital data

Next, we will create a variable that tells us whether a given city is the capital of a department. This is important because capital cities have more mental health and medical diagnostic resources, which can influence neuropsychological diagnostics.For this purpose, we create vectors defining capital cities for each department.

```{r}
# We create a lookup table for department capitals
capitals <- tibble(
  Department = c("Amazonas", "Antioquia", "Arauca", "Atlantico", "Bolivar", 
                   "Boyaca", "Caldas", "Caqueta", "Casanare", "Cauca", "Cesar", 
                   "Choco", "Cordoba", "Cundinamarca", "Guainia", "Guaviare", 
                   "Huila", "La Guajira", "Magdalena", "Meta", "Narino", 
                   "Norte de Santander", "Putumayo", "Quindio", "Risaralda", 
                   "Archipielago de San Andres, Providencia Y Santa Catalina", "Santander", "Sucre", "Tolima", 
                   "Valle del Cauca", "Vaupes", "Vichada", "Bogota, D.C."),
  CapitalCity = c("Leticia", "Medellin", "Arauca", "Barranquilla", "Cartagena", 
                       "Tunja", "Manizales", "Florencia", "Yopal", "Popayan", "Valledupar", 
                       "Quibdo", "Monteria", "Bogota", "Inirida", "San Jose del Guaviare", 
                       "Neiva", "Riohacha", "Santa Marta", "Villavicencio", "Pasto", 
                       "Cucuta", "Mocoa", "Armenia", "Pereira", "San Andres", 
                       "Bucaramanga", "Sincelejo", "Ibague", "Cali", "Mitu", "Puerto Carreño", "Bogota, D.C.")
)

# We perform a left join with the capitals lookup and then create the new "Capital" column.
Ministery_Data_with_capital <- Ministery_Data_with_pop %>%
  left_join(capitals, by = "Department") %>%
  mutate(Capital = if_else(City == CapitalCity, "Yes", "No"))

```

Next, we verify the resulting table:

```{r}
gt::gt(Ministery_Data_with_capital[1:10,])
```

Now we create some auxiliary variables considering the reference population: 

- Diagnostics_per_hundredthousand: Number of cases per 100.000 inhabitants 

- Diagnostics_Percentage: The percentage of the population diagnosed

```{r}
Ministery_Data_Compiled <- Ministery_Data_with_capital %>%
  mutate(Diagnostics_per_houndredthousand = round((Cases / Population) * 100000))

Ministery_Data_Compiled <- Ministery_Data_Compiled %>%
  mutate(Diagnostics_Percentage = (Cases / Population))
```


And write a .cvs file in the "Data_Processed" folder.

```{r}
write.csv(Ministery_Data_Compiled, "Data_Processed/Ministery_DiagnosticData_Compiled.csv", row.names = FALSE)
```

